name: Build using Homebrew

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, macos-latest ]

    runs-on: ${{ matrix.os }}
    name: "${{ github.workflow }}: ${{ matrix.os }}"

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Dependencies via Homebrew
      shell: bash
      run: |
        # Normally, we would first install Homebrew here: apt install curl,
        # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        # https://stackoverflow.com/questions/25128546/how-to-automate-homebrew-installation
        if [ "$RUNNER_OS" == "Linux" ]; then
          if ! command -v brew &> /dev/null; then
            sudo apt install curl build-essential gcc
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo '# Set PATH, MANPATH, etc., for Homebrew.' >> ~/.bash_profile
            echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> ~/.bash_profile
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          fi
          brew install gcc
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install llvm libomp
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi
        brew install cmake zlib libpng glm sdl2 sdl2_image libarchive boost tinyxml2 opencl-headers

    - name: Install Vulkan SDK
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          distro_code_name="$(lsb_release -c | grep -oP "\:\s+\K\S+")"
          os_arch="$(uname -m)"
          if ! curl -s -I "https://packages.lunarg.com/vulkan/lunarg-vulkan-${distro_code_name}.list" | grep "2 404" > /dev/null; then
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-${distro_code_name}.list \
            https://packages.lunarg.com/vulkan/lunarg-vulkan-${distro_code_name}.list
            sudo apt update
            sudo apt install vulkan-sdk shaderc
          else
            curl --silent --show-error --fail -O https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.gz
            mkdir -p VulkanSDK
            tar -xzf vulkan-sdk.tar.gz -C VulkanSDK
            VK_LAYER_PATH=""
            source "VulkanSDK/$(ls VulkanSDK)/setup-env.sh"
            # Fix pkgconfig file.
            shaderc_pkgconfig_file="VulkanSDK/$(ls VulkanSDK)/$os_arch/lib/pkgconfig/shaderc.pc"
            prefix_path=$(realpath "VulkanSDK/$(ls VulkanSDK)/$os_arch")
            sed -i '3s;.*;prefix=\"'$prefix_path'\";' "$shaderc_pkgconfig_file"
            sed -i '5s;.*;libdir=${prefix}/lib;' "$shaderc_pkgconfig_file"
            echo "PKG_CONFIG_PATH=\"$(realpath "VulkanSDK/$(ls VulkanSDK)/$os_arch/lib/pkgconfig")\"" >> $GITHUB_ENV
          fi
        elif [ "$RUNNER_OS" == "macOS" ]; then
          vulkansdk_filename=$(curl -sIkL https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg | sed -r '/filename=/!d;s/.*filename=(.*)$/\1/')
          VULKAN_SDK_VERSION=$(echo $vulkansdk_filename | sed -r 's/^.*vulkansdk-macos-(.*)\.dmg.*$/\1/')
          curl -O https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg
          sudo hdiutil attach vulkan-sdk.dmg
          sudo /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION/InstallVulkan.app/Contents/MacOS/InstallVulkan \
          --root ~/VulkanSDK/$VULKAN_SDK_VERSION --accept-licenses --default-answer --confirm-command install
          cd ~/VulkanSDK/$VULKAN_SDK_VERSION
          sudo ./install_vulkan.py || true
          sudo hdiutil unmount /Volumes/vulkansdk-macos-$VULKAN_SDK_VERSION
        else
          echo "$RUNNER_OS is not supported."
          exit 1
        fi

    - name: Configure CMake
      shell: bash
      run: |
        params=()
        if [ "$RUNNER_OS" == "Linux" ]; then
          if [ "${{env.PKG_CONFIG_PATH}}" != "" ]; then
            VK_LAYER_PATH=""
            source "VulkanSDK/$(ls VulkanSDK)/setup-env.sh"
            export PKG_CONFIG_PATH="${{env.PKG_CONFIG_PATH}}"
          else
            os_arch="$(uname -m)"
            export VULKAN_SDK="/usr"
            export PKG_CONFIG_PATH="/usr/lib/${os_arch}-linux-gnu/pkgconfig"
          fi
        elif [ "$RUNNER_OS" == "macOS" ]; then
          source "$HOME/VulkanSDK/$(ls $HOME/VulkanSDK)/setup-env.sh"
          params+=(-DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=False -DCMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=False -DCMAKE_FIND_FRAMEWORK=Last -DCMAKE_FIND_APPBUNDLE=Never -DZLIB_ROOT="/usr/local/opt/zlib")
        fi
        cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH="$(brew --prefix)" "${params[@]}"

    - name: Build
      run: cmake --build "${{github.workspace}}/build" --config ${{env.BUILD_TYPE}} --parallel 4
